<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>还没想好叫什么</title><link>https://blog.qianjy.net/</link><description>Recent content on 还没想好叫什么</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 17 Dec 2022 00:37:52 +0800</lastBuildDate><atom:link href="https://blog.qianjy.net/index.xml" rel="self" type="application/rss+xml"/><item><title>两数之和</title><link>https://blog.qianjy.net/posts/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</link><pubDate>Sat, 17 Dec 2022 00:37:52 +0800</pubDate><guid>https://blog.qianjy.net/posts/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid><description>两数之和 涉及相关知识：array, hash-table
leetcode原题要求：
给定一个整数数组nums和一个整数目标值target，请你在该数组中找出和为目标值target的那两个整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
你可以按任意顺序返回答案。
进阶：你可以想出一个时间复杂度小于$O(N^2)$的算法吗？
方法1：枚举
class Solution { public int[] twoSum(int[] nums, int target) { int n=nums.length; for(int i = 0; i &amp;lt; n - 1; ++i){ //使用++i而非i++是为了减少了内存空间使用和运行时间 for(int j = i + 1; j &amp;lt; n; ++j){ if(nums[i] + nums[j] == target){ return new int[] {i, j}; } } } return new int[0]; } } 上述算法运用了数组的基本知识，时间复杂度为$O(N^2)$，接下来考虑一种时间复杂度更小的方法。
方法2：哈希表
class Solution{ public int[] twoSum(int[] nums, int target){ Map&amp;lt;Integer, Integer&amp;gt; hashtable = new HashMap&amp;lt;Integer, Integer&amp;gt;(); for (int i = 0; i &amp;lt; nums.</description></item><item><title>Ready</title><link>https://blog.qianjy.net/posts/ready/</link><pubDate>Tue, 13 Dec 2022 12:58:30 +0800</pubDate><guid>https://blog.qianjy.net/posts/ready/</guid><description>写在最前面的 I write this article since I&amp;rsquo;m ready to start a blog.
2012/12/13
这里显示的是斜体
这里显示的倾斜体
这里显示的文字是加粗了
这里的文字是倾斜加粗的</description></item><item><title>Hello world!</title><link>https://blog.qianjy.net/posts/test/</link><pubDate>Mon, 12 Dec 2022 13:22:21 +0800</pubDate><guid>https://blog.qianjy.net/posts/test/</guid><description>Hello world!</description></item><item><title>关于我</title><link>https://blog.qianjy.net/about/</link><pubDate>Sun, 11 Dec 2022 22:12:54 +0800</pubDate><guid>https://blog.qianjy.net/about/</guid><description>A headline this is a test.
22:16pm</description></item></channel></rss>